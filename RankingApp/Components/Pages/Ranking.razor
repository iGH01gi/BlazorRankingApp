@page "/ranking"
@using RankingApp.Data.Services
@using SharedData.Models
@rendermode InteractiveServer

@inject RankingService RankingService

<h3>Ranking</h3>

<AuthorizeView>
    <Authorized>
        @if (_gameResults == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Username</th>
                    <th>Score</th>
                    <th>Date</th>
                    <th></th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var gameResult in _gameResults)
                {
                    <tr>
                        <td>@gameResult.Username</td>
                        <td>@gameResult.Score</td>
                        <td>@gameResult.Date.ToString()</td>
                        <td>
                            <button class="btn btn-primary" @onclick="()=>UpdateGameResult(gameResult)">Edit</button>
                            <button class="btn btn-primary" @onclick="()=>DeleteGameResult(gameResult)">Delete</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }

        <p>
            <button class="btn btn-primary" @onclick="AddGameResult">Add</button>
        </p>

        @if (_showPopup)
        {
            <div class="modal" style="display: block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Add/Update GameResult</h3>
                            <button type="button" class="close" @onclick="ClosePopup">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <label for="UserName">UserName</label>
                            <input class="form-control" type="text" placeholder="UserName" @bind="@_gameResult.Username"/>
                            <label for="UserName">Score</label>
                            <input class="form-control" type="text" placeholder="Score" @bind="@_gameResult.Score"/>
                            <button class="btn btn-primary" @onclick="SaveGameResult">
                                Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>you are not authorized</p>
    </NotAuthorized>
</AuthorizeView>



@code {

    List<GameResult> _gameResults;

    bool _showPopup;
    GameResult _gameResult;

    protected override async Task OnInitializedAsync()
    {
        _gameResults = await RankingService.GetGameResultsAsync();
    }

    private void AddGameResult()
    {
        _showPopup = true;
        _gameResult = new GameResult() { Id = 0 };
    }

    void ClosePopup()
    {
        _showPopup = false;
    }
    
    void UpdateGameResult(GameResult gameResult)
    {
        _showPopup = true;
        _gameResult = gameResult;
    }
    
    async Task DeleteGameResult(GameResult gameResult)
    {
        var result = await RankingService.DeleteGameResult(gameResult);
        _gameResults = await RankingService.GetGameResultsAsync();
    }

   async Task SaveGameResult()
    {
        if (_gameResult.Id == 0)
        {
            _gameResult.Date = DateTime.Now;
            var result = await RankingService.AddGameResult(_gameResult);
        } 
        else
        {
            //추가 말고 수정하는 부분
            var result = await RankingService.UpdateGameResult(_gameResult);
        }
        
        _showPopup = false;
        _gameResults = await RankingService.GetGameResultsAsync();
        StateHasChanged();
    }
    
}